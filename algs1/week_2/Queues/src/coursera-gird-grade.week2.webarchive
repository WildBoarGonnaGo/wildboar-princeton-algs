bplist00Ñ_WebMainResourceÕ	
^WebResourceURL_WebResourceFrameName_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName_ðhttps://coursera-grid-grade.s3.amazonaws.com/output/bHZN_7fdQMy2Tf-33bDMGQ/htmlFeedback.html?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIQCLj1hjlHBgX936dsCEh7cuJ8MduCpw47wQ6k4S2w9X4QIgP3VMBKi4uyre89JhI7ZfSRrnjN%2BPlvNCvm8Xa99GBy0q%2BgMIehAAGgwyMDAzNzQ2NTQ5MTIiDLqNxV5HpsbPrMlALCrXA%2FSYdWEOMGq7PSKRpono4PcrLc%2FrS3ltd125mC%2Bsg7PX4%2FiTiRGlmllPuYd1mnvYy%2BMVTqOO3h4sJQeNC4knOJER%2Bp3QFuOtoCkRNKDF4823L0Aw4R98RZ1Sz9dEVIYWu4pC3tLuIjKLKr%2FunA5CTiKya8dO8swwS4g6M7GOWRYC0xSzokk4d13ed7va8pJHU%2FEyx3GvLB9LnAae04kk8dTJ%2Ftq3SqfEc9MpoviAMIzQWorgjAxKHZJGWIOKd3k8Oz025ALEiM9BEPv9m24EpnyFbvg3tGhF27bMmtABqIxdze5XOmyg3741%2BoQ9ikmJK2JmiA2HjiGuNysxN4P3XaNE3%2BIz0XQY2x8L15J1Tx5M%2FZDvtwqfWlKejC7rXwmvBrlj3v3dbnuflgbECIO21etyb5pM7%2BSBpPSaWILBGIHRNF6%2BTeTc4wHpyDcxZb6QR6FZw80Q2QMPQmFgcGVbjRVpSD9H9gdeKITy8d2pY0fTeA5TcMyHtZZ%2BdcSdGNN4p%2B1jNOTqsQqHAx8xphJB2NrcgjUtXuIYK86CpdQ1rZ7tk%2F5t75976BCjeAVSeIITaWTZxxyuoTN09olVI3u7PqHvoPYp3tzlJT%2BNN8kpoLGBS7OvUxFogzCb4LONBjqlAXV%2Bz5L%2FqsvtsHRzKPxB2LXl41tUaOHDXV2PSmh5RLU%2FIVnXETtic6yKFTFWlX5Sm3LFX6IAp6LC0UAjmubo1JKtEkAj%2FZax6VO4O8CkmobUk5e%2BR187bX3vtpL1higm%2BUwhQiqNL8Utt7xRhmoKszcINR0K7QKZu%2F%2Bz4UH74IgAeubfKpBuV0DTDlg47bP3RrrinoO%2FscweJkeCgEzQBKc2BJfk%2BQ%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20211205T175556Z&X-Amz-SignedHeaders=host&X-Amz-Expires=900&X-Amz-Credential=ASIAS5J2CS7AJTZ2SFS3%2F20211205%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=597105a453ea53b5ce3930630c30b1606ddc23d2b0496448aec95ccdfdfad9f3POàQ<!DOCTYPE html><html lang="en"><head>
<title>Autograder Feedback</title>
<meta charset="UTF-8">
</head>

<body>

<p>
<em>
See the Assessment Guide for information on how to interpret this report.
</em>
<br><br>

</p><h2>ASSESSMENT SUMMARY</h2>
<pre>
Compilation:  <font color="#009900">PASSED (0 errors, 3 warnings)</font>
API:          <font color="#009900">PASSED</font>

SpotBugs:     <font color="#990000">FAILED (2 warnings)</font>
PMD:          <font color="#990000">FAILED (3 warnings)</font>
Checkstyle:   <font color="#990000">FAILED (0 errors, 47 warnings)</font>

Correctness:  <font color="#0D9900">45/49 tests passed</font>
Memory:       <font color="#189900">105/122 tests passed</font>
Timing:       <font color="#099900">182/193 tests passed</font>

Aggregate score: 92.57%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]
</pre>


<br><br>

<h2>ASSESSMENT DETAILS</h2>

<pre>
The following files were submitted:
----------------------------------
4.9K Dec  5 17:53 Deque.java
 440 Dec  5 17:53 Permutation.java
4.4K Dec  5 17:53 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:12: warning: [unchecked] unchecked cast
	public RandomizedQueue() { size = 0; arr = (Item[]) new Object[1]; }
	                                                    ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:32: warning: [unchecked] unchecked cast
			Item[] newArr = (Item[]) new Object[amorSize];
			                         ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:70: warning: [unchecked] unchecked cast
			arrCopy = (Item[]) new Object[iterSize];
			                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'remFirst' but never reads the variable.  At Deque.java:[line 66]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'oldLast' but never reads the variable.  At Deque.java:[line 88]
SpotBugs ends with 2 warnings.


================================================================


% pmd .
*-----------------------------------------------------------
Deque.java:63: Avoid unused local variables, such as 'remFirst'. [UnusedLocalVariable]
Deque.java:83: Avoid unused local variables, such as 'oldLast'. [UnusedLocalVariable]
Permutation.java:13: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:6:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Deque.java:14:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:17:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:22:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:24:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:41:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:59:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:73:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:80:27: Inner assignments should be avoided. [InnerAssignment]
[WARN] Deque.java:93:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:135:48: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:135:48: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:135:49: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Deque.java:140:56: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:140:56: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:140:57: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Deque.java:146:55: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:146:55: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:146:56: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Deque.java:163:50: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:163:50: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:163:51: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Deque.java:180:54: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:180:54: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:180:55: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Deque.java:186:55: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:186:55: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Deque.java:186:56: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Permutation.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Permutation.java:7:20: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Permutation.java:10:9: Use the primitive type 'int' instead of the wrapper type 'Integer'. [Wrapper]
[WARN] RandomizedQueue.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] RandomizedQueue.java:11:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:12:70: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] RandomizedQueue.java:14:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:17:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:20:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:28:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:43:44: '(' is preceded with whitespace. [MethodParamPad]
...
Checkstyle ends with 0 errors and 47 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 19 total tests.

Tests 1-8 make random intermixed calls to addFirst(), addLast(),
removeFirst(), removeLast(), isEmpty(), and size(), and iterator().
The probabilities of each operation are (p1, p2, p3, p4, p5, p6, p7),
respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2, 0.0)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2, 0.0)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2, 0.0)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2, 0.0)
==&gt; passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0, 0.0)
==&gt; passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0)
    - failed on operation 30 of 50

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:114)
    TestDeque.test3(TestDeque.java:637)
    TestDeque.main(TestDeque.java:1070)


  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0)
    - failed on operation 23 of 500

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:114)
    TestDeque.test3(TestDeque.java:638)
    TestDeque.main(TestDeque.java:1070)


  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0)
    - failed on operation 21 of 1000

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:114)
    TestDeque.test3(TestDeque.java:639)
    TestDeque.main(TestDeque.java:1070)


  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0, 0.0)
    - failed on operation 19 of 500

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:114)
    TestDeque.test3(TestDeque.java:642)
    TestDeque.main(TestDeque.java:1070)


  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0, 0.0)
    - failed on operation 25 of 1000

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:114)
    TestDeque.test3(TestDeque.java:643)
    TestDeque.main(TestDeque.java:1070)


==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0, 0.0)
==&gt; passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0)
==&gt; passed

Test 6: check random calls to addFirst(), removeFirst(), and iterator()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1)
==&gt; passed

Test 7: check random calls to all methods except iterator()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1, 0.0)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1, 0.0)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1, 0.0)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1, 0.0)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1, 0.0)
    - failed on operation 10 of 50
    - student   size() = 1
    - reference size() = 0
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.isEmpty()         ==&gt; true
         deque.addFirst(2)
         deque.removeLast()      ==&gt; 2
         deque.addLast(4)
         deque.removeFirst()     ==&gt; 4
         deque.addLast(6)
         deque.removeFirst()     ==&gt; 6
         deque.addFirst(8)
         deque.removeFirst()     ==&gt; 8
         deque.size()            ==&gt; 1

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1, 0.0)
    - failed on operation 10 of 500
    - student   size() = 2
    - reference size() = 0
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.addLast(1)
         deque.removeLast()      ==&gt; 1
         deque.isEmpty()         ==&gt; true
         deque.addFirst(4)
         deque.removeLast()      ==&gt; 4
         deque.isEmpty()         ==&gt; true
         deque.isEmpty()         ==&gt; true
         deque.addFirst(8)
         deque.removeFirst()     ==&gt; 8
         deque.size()            ==&gt; 2

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1, 0.0)
    - failed on operation 6 of 1000
    - student   size() = 2
    - reference size() = 0
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.addLast(1)
         deque.removeLast()      ==&gt; 1
         deque.addLast(3)
         deque.removeLast()      ==&gt; 3
         deque.isEmpty()         ==&gt; true
         deque.size()            ==&gt; 2

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 8: check random calls to all methods, including iterator()
  *    5 random calls (0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.2)
  *   50 random calls (0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.2)
    - failed on operation 35 of 50
    - student   size() = 8
    - reference size() = 7

  *  500 random calls (0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.2)
    - failed on operation 6 of 500
    - student iterator() returns wrong set of values
    - student   iterator() = [4, 2]
    - reference iterator() = [4]
    - number of integers returned by student   iterator() = 2
    - number of integers returned by reference iterator() = 1

    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.addLast(2)
         deque.isEmpty()         ==&gt; false
         deque.addFirst(4)
         deque.removeLast()      ==&gt; 2
         deque.iterator()    ==&gt; [4, 2]

  * 1000 random calls (0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.2)
  *    5 random calls (0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2)
  *   50 random calls (0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2)
    - failed on operation 8 of 50
    - student   size() = 1
    - reference size() = 0
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.isEmpty()         ==&gt; true
         deque.size()            ==&gt; 0
         deque.addLast(6)
         deque.removeLast()      ==&gt; 6
         deque.size()            ==&gt; 1

  *  500 random calls (0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2)
    - failed on operation 10 of 500
    - student   size() = 1
    - reference size() = 0
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.isEmpty()         ==&gt; true
         deque.size()            ==&gt; 0
         deque.addLast(4)
         deque.removeLast()      ==&gt; 4
         deque.isEmpty()         ==&gt; true
         deque.isEmpty()         ==&gt; true
         deque.size()            ==&gt; 1

  * 1000 random calls (0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2)
    - failed on operation 17 of 1000
    - student   size() = 2
    - reference size() = 0

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 9: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==&gt; passed

Test 10: check whether two Deque objects can be created at the same time
  * n = 10
  * n = 1000
==&gt; passed

Test 11: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==&gt; passed

Test 12: check iterator() after random calls to addFirst(), addLast(),
         removeFirst(), and removeLast() with probabilities (p1, p2, p3, p4)
  * 20 random operations (0.8, 0.0, 0.2, 0.0)
  * 20 random operations (0.8, 0.0, 0.0, 0.2)
    - number of student   entries = 2
    - number of reference entries = 1
    - student iterator() yields wrong result
      after applying add/remove operation 3 of 20
    - student   iterator() = [2, 1]
    - reference iterator() = [2]
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.addFirst(1)
         deque.iterator()     ==&gt; [1]
         deque.addFirst(2)
         deque.iterator()     ==&gt; [2, 1]
         deque.removeLast()   ==&gt; 1
         deque.iterator()     ==&gt; [2, 1]

  * 20 random operations (0.0, 0.8, 0.0, 0.2)
  * 20 random operations (0.0, 0.8, 0.2, 0.0)
  * 20 random operations (0.4, 0.4, 0.1, 0.1)
  * 20 random operations (0.2, 0.0, 0.8, 0.0)
  * 20 random operations (0.2, 0.0, 0.0, 0.8)
    - number of student   entries = 2
    - number of reference entries = 1
    - student iterator() yields wrong result
      after applying add/remove operation 3 of 20
    - student   iterator() = [2, 1]
    - reference iterator() = [2]
    - sequence of operations was:
         Deque&lt;Integer&gt; deque = new Deque&lt;&gt;()
         deque.addFirst(1)
         deque.iterator()     ==&gt; [1]
         deque.addFirst(2)
         deque.iterator()     ==&gt; [2, 1]
         deque.removeLast()   ==&gt; 1
         deque.iterator()     ==&gt; [2, 1]

  * 20 random operations (0.0, 0.2, 0.0, 0.8)
  * 20 random operations (0.0, 0.2, 0.8, 0.0)
  * 20 random operations (0.1, 0.1, 0.4, 0.4)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 1000 random operations (0.4, 0.4, 0.1, 0.1)
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: create two nested iterators to same deque of size n
  * n = 10
  * n = 50
==&gt; passed

Test 14: create two parallel iterators to same deque of size n
  * n = 10
  * n = 50
==&gt; passed

Test 15: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==&gt; passed

Test 16: create Deque objects of different parameterized types
==&gt; passed

Test 17: call addFirst() and addLast() with null argument
==&gt; passed

Test 18: check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 19: call iterator() when the deque is empty
==&gt; passed


Total: 15/19 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 21 total tests.

Tests 1-6 make random intermixed calls to enqueue(), dequeue(), sample(),
isEmpty(), size(), and iterator(). The probabilities of each operation
are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2, 0.0)
==&gt; passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1, 0.0)
==&gt; passed

Test 3: check random calls to enqueue() and sample()
  *    5 random calls (0.8, 0.0, 0.2, 0.0, 0.0, 0.0)
  *   50 random calls (0.8, 0.0, 0.2, 0.0, 0.0, 0.0)
  *  500 random calls (0.8, 0.0, 0.2, 0.0, 0.0, 0.0)
  * 1000 random calls (0.8, 0.0, 0.2, 0.0, 0.0, 0.0)
  *    5 random calls (0.2, 0.0, 0.8, 0.0, 0.0, 0.0)
  *   50 random calls (0.2, 0.0, 0.8, 0.0, 0.0, 0.0)
  *  500 random calls (0.2, 0.0, 0.8, 0.0, 0.0, 0.0)
  * 1000 random calls (0.2, 0.0, 0.8, 0.0, 0.0, 0.0)
==&gt; passed

Test 4: check random calls to enqueue() and iterator()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.0, 0.2)
==&gt; passed

Test 5: check random calls to all methods except iterator()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1, 0.0)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1, 0.0)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1, 0.0)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1, 0.0)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1, 0.0)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1, 0.0)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1, 0.0)
==&gt; passed

Test 6: check random calls to all methods, including iterator()
  *    5 random calls (0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.5, 0.1, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.5, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.5, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.5, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.5, 0.1, 0.1, 0.1, 0.1)
==&gt; passed

Test 7: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==&gt; passed

Test 8: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==&gt; passed

Test 9: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==&gt; passed

Test 10: check that iterator() returns correct items after intermixed
         sequence of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==&gt; passed

Test 11: create two nested iterators over the same randomized queue of size n
  * n = 10
  * n = 50
==&gt; passed

Test 12: create two parallel iterators over the same randomized queue of size n
  * n = 10
  * n = 50
==&gt; passed

Test 13: create two iterators over different randomized queues,
         each of length 10
==&gt; passed

Test 14: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==&gt; passed

Test 15: create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 16: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==&gt; passed

Test 17: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==&gt; passed

Test 18: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==&gt; passed

Test 19: call enqueue() with a null argument
==&gt; passed

Test 20: check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 21: call iterator() when randomized queue is empty
==&gt; passed


Total: 21/21 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 &lt; distinct.txt
  F
  H
  E

  % java Permutation 3 &lt; distinct.txt
  E
  H
  I

  % java Permutation 8 &lt; duplicates.txt
  BB
  CC
  CC
  BB
  BB
  AA
  BB
  BB

==&gt; passed

Test 1b: check formatting for other inputs
  % java Permutation 8 &lt; mediumTale.txt
  worst
  best
  it
  times
  of
  of
  the
  the

  % java Permutation 0 &lt; distinct.txt
  [no output]

==&gt; passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==&gt; passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==&gt; passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==&gt; passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==&gt; passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==&gt; passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==&gt; passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==&gt; passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=&gt; passed        1000     0.00
=&gt; passed        2000     0.00
=&gt; passed        4000     0.00
=&gt; passed        8000     0.00
=&gt; passed       16000     0.01
=&gt; passed       32000     0.01
=&gt; passed       64000     0.02
=&gt; passed      128000     0.04
=&gt; passed      256000     0.07
=&gt; passed      512000     0.15
==&gt; 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=&gt; passed        1000     0.00
=&gt; passed        2000     0.00
=&gt; passed        4000     0.00
=&gt; passed        8000     0.00
=&gt; passed       16000     0.00
=&gt; passed       32000     0.01
=&gt; passed       64000     0.02
=&gt; passed      128000     0.04
=&gt; passed      256000     0.08
=&gt; passed      512000     0.15
==&gt; 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==&gt; passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==&gt; passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 49 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=&gt; passed       32         1576         
=&gt; passed       64         3112         
=&gt; passed      128         6184         
=&gt; passed      256        12328         
=&gt; passed      512        24616         
=&gt; passed     1024        49192         
=&gt; passed     2048        98344         
=&gt; passed     4096       196648         
=&gt; passed     8192       393256         
==&gt; 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33         1624         
=&gt; passed       65         3160         
=&gt; passed      129         6232         
=&gt; passed      257        12376         
=&gt; passed      513        24664         
=&gt; passed     1025        49240         
=&gt; passed     2049        98392         
=&gt; passed     4097       196696         
=&gt; passed     8193       393304         
==&gt; 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33         1624         
=&gt; passed       65         3160         
=&gt; passed      129         6232         
=&gt; passed      257        12376         
=&gt; passed      513        24664         
=&gt; passed     1025        49240         
=&gt; passed     2049        98392         
=&gt; passed     4097       196696         
=&gt; passed     8193       393304         
==&gt; 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=&gt; passed       32           88         
=&gt; passed       64           88         
=&gt; passed      128           88         
=&gt; passed      256           88         
=&gt; passed      512           88         
=&gt; passed     1024           88         
=&gt; passed     2048           88         
=&gt; passed     4096           88         
=&gt; passed     8192           88         
==&gt; 9/9 tests passed

Memory: 88.00   (R^2 = 1.000)


Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=&gt; passed       32           32         
=&gt; passed       64           32         
=&gt; passed      128           32         
=&gt; passed      256           32         
=&gt; passed      512           32         
=&gt; passed     1024           32         
=&gt; passed     2048           32         
=&gt; passed     4096           32         
=&gt; passed     8192           32         
==&gt; 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:401)
    MemoryOfDeque.test6a(MemoryOfDeque.java:454)
    MemoryOfDeque.main(MemoryOfDeque.java:738)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 9 of 100 deletions
    - maximum number of loitered objects at one time = 4

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addFirst("TZACMSFCKM")
         deque.addFirst("NXLKORJJAJ")
         deque.addFirst("XKVSTOTCLN")
         deque.removeLast()      ==&gt; TZACMSFCKM
    - loitered object(s):
      TZACMSFCKM

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 6 of 100
    - sequence of operations was:
         deque.addLast("PEGTVODVFS")
         deque.addLast("VYAPDOCRKE")
         deque.addLast("CLITFCFTXO")
         deque.addLast("KIFMJPHENC")
         deque.addLast("IOZVCQWVQJ")
         deque.removeFirst()     ==&gt; PEGTVODVFS
    - loitered object(s):
      PEGTVODVFS

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 9 of 100
    - sequence of operations was:
         deque.addLast("FMOSKOECVZ")
         deque.addLast("OKSELINVVU")
         deque.removeLast()      ==&gt; OKSELINVVU
         deque.removeFirst()     ==&gt; FMOSKOECVZ
         deque.addLast("QUETRFCUEL")
         deque.removeFirst()     ==&gt; QUETRFCUEL
         deque.addLast("JAWKDHGVIZ")
         deque.addFirst("AWDIESOEWQ")
         deque.removeLast()      ==&gt; JAWKDHGVIZ
    - loitered object(s):
      JAWKDHGVIZ

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 7: Perform m random add/remove operations in the deque and check
        that only constant memory is allocated/deallocated per operation
  * m = 128

    java.lang.NullPointerException

    Deque.addLast(Deque.java:53)
    MemoryOfDeque.checkConstantMemoryPerAddRemove(MemoryOfDeque.java:607)
    MemoryOfDeque.test7(MemoryOfDeque.java:703)
    MemoryOfDeque.main(MemoryOfDeque.java:740)

  * m = 256
  * m = 512
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 8: Insert m items into deque; then iterate over deque and check
        that only constant memory is allocated/deallocated per operation
  * m = 64
  * m = 128
  * m = 256
==&gt; passed


Min observed memory for Deque: 48.00 n + 40.00   (R^2 = 1.000)
Max observed memory for Deque: 48.00 n + 40.00   (R^2 = 1.000)

Total: 46/49 tests passed!


================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For Tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

For Test 6, the maximum amount of memory allowed for
a RandomizedQueue iterator over n items is 8n + 72.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32          312         
=&gt; passed       64          568         
=&gt; passed      128         1080         
=&gt; passed      256         2104         
=&gt; passed      512         4152         
=&gt; passed     1024         8248         
=&gt; passed     2048        16440         
=&gt; passed     4096        32824         
=&gt; passed     8192        65592         
==&gt; 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33          568         
=&gt; passed       65         1080         
=&gt; passed      129         2104         
=&gt; passed      257         4152         
=&gt; passed      513         8248         
=&gt; passed     1025        16440         
=&gt; passed     2049        32824         
=&gt; passed     4097        65592         
=&gt; passed     8193       131128         
==&gt; 9/9 tests passed

Memory: 16.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33         1080         
=&gt; passed       65         2104         
=&gt; passed      129         4152         
=&gt; passed      257         8248         
=&gt; passed      513        16440         
=&gt; passed     1025        32824         
=&gt; passed     2049        65592         
=&gt; passed     4097       131128         
=&gt; passed     8193       262200         
==&gt; 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32          312         
=&gt; passed       64          568         
=&gt; passed      128         1080         
=&gt; passed      256         2104         
=&gt; passed      512         4152         
=&gt; passed     1024         8248         
=&gt; passed     2048        16440         
=&gt; passed     4096        32824         
=&gt; passed     8192        65592         
==&gt; 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>       32          312   (1.3x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64          568   (2.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>      128         1080   (4.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>      256         2104   (8.8x)
=&gt; <font color="#990000"><b>FAILED</b></font>      512         4152  (17.3x)
=&gt; <font color="#990000"><b>FAILED</b></font>     1024         8248  (34.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>     2048        16440  (68.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>     4096        32824 (136.8x)
=&gt; <font color="#990000"><b>FAILED</b></font>     8192        65592 (273.3x)
==&gt; 0/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 6a-6i: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32          320         
=&gt; passed       64          576         
=&gt; passed      128         1088         
=&gt; passed      256         2112         
=&gt; passed      512         4160         
=&gt; passed     1024         8256         
=&gt; passed     2048        16448         
=&gt; passed     4096        32832         
=&gt; passed     8192        65600         
==&gt; 9/9 tests passed

Memory: 8.00 n + 64.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==&gt; passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==&gt; passed

Test 8: Insert m items into queue; then iterate over deque and check
        that only constant memory is allocated/deallocated per operation
  * m = 64
  * m = 128
  * m = 256
==&gt; passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32          312         
=&gt; passed       64          568         
=&gt; passed      128         1080         
=&gt; passed      256         2104         
=&gt; passed      512         4152         
=&gt; passed     1024         8248         
=&gt; passed     2048        16440         
==&gt; 7/7 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=&gt; passed     3200        65592         
=&gt; passed     1600        65592         
=&gt; <font color="#990000"><b>FAILED</b></font>      800        65592   (1.7x)
=&gt; <font color="#990000"><b>FAILED</b></font>      400        65592   (3.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>      200        65592   (6.7x)
=&gt; <font color="#990000"><b>FAILED</b></font>      100        65592  (13.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>       50        65592  (25.3x)
==&gt; 2/7 tests passed

Memory: 65592.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 65592.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 24.00   (R^2 = 1.000)

Running 71 total tests.

Total: 57/71 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.01
==&gt; 11/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.01
==&gt; 11/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.01
==&gt; 11/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.01
==&gt; 11/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.01
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.03
=&gt; passed     2048000     0.06
==&gt; 12/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.03
=&gt; passed     2048000     0.06
==&gt; 12/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00

    java.lang.NullPointerException

    Deque.removeLast(Deque.java:84)
    TimeDeque.timeRandomOperations(TimeDeque.java:107)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=&gt; <font color="#990000"><b>FAILED</b></font>        2048   Test did not complete due to an exception.

==&gt; 1/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.02
=&gt; passed     2048000     0.03
==&gt; 12/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=&gt; passed        1025     0.00
=&gt; passed        2049     0.00
=&gt; passed        4097     0.00
=&gt; passed        8193     0.00
=&gt; passed       16385     0.00
=&gt; passed       32769     0.00
=&gt; passed       65537     0.00
=&gt; passed      128001     0.01
=&gt; passed      256001     0.01
=&gt; passed      512001     0.03
=&gt; passed     1024001     0.05
==&gt; 11/11 tests passed

Total: 92/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.02
=&gt; passed     1024000     0.04
==&gt; 11/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.05
=&gt; passed     1024000     0.12
==&gt; 11/11 tests passed


Test 6a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.03
=&gt; passed     1024000     0.08
==&gt; 11/11 tests passed


Test 7a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.04
=&gt; passed     1024000     0.13
==&gt; 11/11 tests passed


Test 8a-k: make n calls to enqueue() followed by n calls each to
           next() and hasNext().

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.03
=&gt; passed     1024000     0.07
==&gt; 11/11 tests passed


Test 9a-i: make 100 calls to enqueue; 99 calls to dequeue;
           n calls to enqueue(); then call dequeue() three times,
           followed by enqueue() three times, and repeat n times.

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.01
=&gt; passed       65536     0.01
=&gt; passed      128000     0.02
=&gt; passed      256000     0.05
==&gt; 9/9 tests passed


Total: 67/67 tests passed!


================================================================




</pre>


</body></html>Ytext/htmlUUTF-8    ( 7 N ` v æÞæè                           æî